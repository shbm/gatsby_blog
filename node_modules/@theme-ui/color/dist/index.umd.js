(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('polished'), require('@theme-ui/css')) :
  typeof define === 'function' && define.amd ? define(['exports', 'polished', '@theme-ui/css'], factory) :
  (factory((global.color = {}),global.polished,global.css));
}(this, (function (exports,P,css) {
  var g = function (t, c) { return css.get(t, ("colors." + c), c).replace(/^var\(--(\w+)(.*?), /, '').replace(/\)/, ''); };

  var darken = function (c, n) { return function (t) { return P.darken(n, g(t, c)); }; };
  var lighten = function (c, n) { return function (t) { return P.lighten(n, g(t, c)); }; };
  var rotate = function (c, d) { return function (t) { return P.adjustHue(d, g(t, c)); }; };
  var hue = function (c, h) { return function (t) { return P.setHue(h, g(t, c)); }; };
  var saturation = function (c, s) { return function (t) { return P.setSaturation(s, g(t, c)); }; };
  var lightness = function (c, l) { return function (t) { return P.setLightness(l, g(t, c)); }; };
  var desaturate = function (c, n) { return function (t) { return P.desaturate(n, g(t, c)); }; };
  var saturate = function (c, n) { return function (t) { return P.saturate(n, g(t, c)); }; };
  var shade = function (c, n) { return function (t) { return P.shade(n, g(t, c)); }; };
  var tint = function (c, n) { return function (t) { return P.tint(n, g(t, c)); }; };
  var transparentize = function (c, n) { return function (t) { return P.transparentize(n, g(t, c)); }; };
  var alpha = function (c, n) { return function (t) { return P.rgba(g(t, c), n); }; };
  var mix = function (a, b, n) {
  	if ( n === void 0 ) n = 0.5;

  	return function (t) { return P.mix(n, g(t, a), g(t, b)); };
  };
  var complement = function (c) { return function (t) { return P.complement(g(t, c)); }; };
  var invert = function (c) { return function (t) { return P.invert(g(t, c)); }; };
  var grayscale = function (c, n) { return desaturate(c, 1); };

  exports.darken = darken;
  exports.lighten = lighten;
  exports.rotate = rotate;
  exports.hue = hue;
  exports.saturation = saturation;
  exports.lightness = lightness;
  exports.desaturate = desaturate;
  exports.saturate = saturate;
  exports.shade = shade;
  exports.tint = tint;
  exports.transparentize = transparentize;
  exports.alpha = alpha;
  exports.mix = mix;
  exports.complement = complement;
  exports.invert = invert;
  exports.grayscale = grayscale;

})));
//# sourceMappingURL=index.umd.js.map
