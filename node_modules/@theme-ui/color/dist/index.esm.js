import { darken, lighten, adjustHue, setHue, setSaturation, setLightness, desaturate, saturate, shade, tint, transparentize, rgba, mix, complement, invert } from 'polished';
import { get } from '@theme-ui/css';

var g = function (t, c) { return get(t, ("colors." + c), c).replace(/^var\(--(\w+)(.*?), /, '').replace(/\)/, ''); };

var darken$1 = function (c, n) { return function (t) { return darken(n, g(t, c)); }; };
var lighten$1 = function (c, n) { return function (t) { return lighten(n, g(t, c)); }; };
var rotate = function (c, d) { return function (t) { return adjustHue(d, g(t, c)); }; };
var hue = function (c, h) { return function (t) { return setHue(h, g(t, c)); }; };
var saturation = function (c, s) { return function (t) { return setSaturation(s, g(t, c)); }; };
var lightness = function (c, l) { return function (t) { return setLightness(l, g(t, c)); }; };
var desaturate$1 = function (c, n) { return function (t) { return desaturate(n, g(t, c)); }; };
var saturate$1 = function (c, n) { return function (t) { return saturate(n, g(t, c)); }; };
var shade$1 = function (c, n) { return function (t) { return shade(n, g(t, c)); }; };
var tint$1 = function (c, n) { return function (t) { return tint(n, g(t, c)); }; };
var transparentize$1 = function (c, n) { return function (t) { return transparentize(n, g(t, c)); }; };
var alpha = function (c, n) { return function (t) { return rgba(g(t, c), n); }; };
var mix$1 = function (a, b, n) {
	if ( n === void 0 ) n = 0.5;

	return function (t) { return mix(n, g(t, a), g(t, b)); };
};
var complement$1 = function (c) { return function (t) { return complement(g(t, c)); }; };
var invert$1 = function (c) { return function (t) { return invert(g(t, c)); }; };
var grayscale = function (c, n) { return desaturate$1(c, 1); };

export { darken$1 as darken, lighten$1 as lighten, rotate, hue, saturation, lightness, desaturate$1 as desaturate, saturate$1 as saturate, shade$1 as shade, tint$1 as tint, transparentize$1 as transparentize, alpha, mix$1 as mix, complement$1 as complement, invert$1 as invert, grayscale };
//# sourceMappingURL=index.esm.js.map
